/*
 * Copyright (c) 2013 - 2016, MasterCard International Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 *
 */

var MasterCardAPI = require('mastercard-api-core');
var ResourceConfig = require('./resourceconfig');
var Consumer = {};
var operationConfigs = {};

/**
 * Initialize Consumer
 * @private
 */
var _init = function() {
	operationConfigs["6f3fff3d-c11f-43b7-a756-aae1db71a3a4"] = new MasterCardAPI.OperationConfig("/send/v1/partners/{partnerId}/consumers/{consumerId}", "delete", [""], [""]);
operationConfigs["bfdc2dff-c220-4fba-b8bd-14561cb54be2"] = new MasterCardAPI.OperationConfig("/send/v1/partners/{partnerId}/consumers", "create", [""], [""]);
operationConfigs["dc9c8c25-9f3a-43ba-89cb-2225e90b3aec"] = new MasterCardAPI.OperationConfig("/send/v1/partners/{partnerId}/consumers/{consumerId}", "read", [""], [""]);
operationConfigs["f7540607-2a65-4bac-b5c7-ab383c02e5d4"] = new MasterCardAPI.OperationConfig("/send/v1/partners/{partnerId}/consumers", "query", ["ref","contact_id_uri"], [""]);
operationConfigs["746fc4b6-6a01-4940-8cef-9e7c69cc6e34"] = new MasterCardAPI.OperationConfig("/send/v1/partners/{partnerId}/consumers/search", "create", [""], [""]);
operationConfigs["33ad5faf-4a39-470e-8ce2-842d33920d7f"] = new MasterCardAPI.OperationConfig("/send/v1/partners/{partnerId}/consumers/{consumerId}", "update", [""], [""]);
};

_init();

/**
 * Private function to get operation config
 * @returns Object operation config
 * @private
 */
var _getOperationConfig = function(operationUUID) {
	var operationConfig = operationConfigs[operationUUID];

	if(!MasterCardAPI.isSet(operationConfig)) {
		throw new MasterCardAPI.MasterCardError.SDKError("Invalid operationUUID supplied: " + operationUUID);
	}

	return operationConfig;
};

var _getOperationMetaData = function() {
	return new MasterCardAPI.OperationMetaData(ResourceConfig.getVersion(), ResourceConfig.getHost(), ResourceConfig.getContext());
};

/**
 * Function to delete a Consumer object.
 *
 * @method delete
 * @param {String} id - A string ID of the Consumer to delete.
 * @param {Object} map - a map of additional parameters
 * @param {Function} callback - A function to handle success/error responses from the API.<br/>
 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
 */
Consumer.delete = function(id, map, callback) {
	var params = MasterCardAPI.isSet(map) ? map : {};
	if (id) {
		params.id = id;
	}
	try {
		MasterCardAPI.execute({
			operationConfig: _getOperationConfig("6f3fff3d-c11f-43b7-a756-aae1db71a3a4"),
			operationMetaData: _getOperationMetaData(),
			params: params
		}, callback);
	}
	catch (e) {
		callback(e, null);
	}

};
/**
 * Function to create a Consumer object.
 *
 * @method create
 * @param {Object} params - A map of parameters in which to create the Consumer from.
 * @param {Function} callback - A function to handle success/error responses from the API.<br/>
 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
 */
Consumer.create = function(params, callback) {
	try {
		MasterCardAPI.execute({
			operationConfig: _getOperationConfig("bfdc2dff-c220-4fba-b8bd-14561cb54be2"),
			operationMetaData: _getOperationMetaData(),
			params: params
		}, callback);
	}
	catch (e) {
		callback(e, null);
	}

};
/**
 * Function to retrieve a Consumer object from the API.
 *
 * @method find
 * @param {String} id - The ID of the Consumer to retrieve
 * @param {Object} query - A map of parameters in which to create the Consumer from.
 * @param {Function} callback - A function to handle success/error responses from the API.<br/>
 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
 */
Consumer.readByID = function(id, query, callback) {
	var params = MasterCardAPI.isSet(query) ? query : {};
	if (id) {
		params.id = id;
	}

	try {
		MasterCardAPI.execute({
			operationConfig: _getOperationConfig("dc9c8c25-9f3a-43ba-89cb-2225e90b3aec"),
			operationMetaData: _getOperationMetaData(),
			params: params
		}, callback);
	}
	catch (e) {
		callback(e, null);
	}

};
/**
 * Function to query a Consumer object from the API.
 *
 * @method find
 * @param {Object} query - A map of parameters in which to create the Consumer from.
 * @param {Function} callback - A function to handle success/error responses from the API.<br/>
 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
 */
Consumer.listByReferenceOrContactID = function(query, callback) {
	var params = MasterCardAPI.isSet(query) ? query : {};

	try {
		MasterCardAPI.execute({
			operationConfig: _getOperationConfig("f7540607-2a65-4bac-b5c7-ab383c02e5d4"),
			operationMetaData: _getOperationMetaData(),
			params: params
		}, callback);
	}
	catch (e) {
		callback(e, null);
	}

};
/**
 * Function to create a Consumer object.
 *
 * @method create
 * @param {Object} params - A map of parameters in which to create the Consumer from.
 * @param {Function} callback - A function to handle success/error responses from the API.<br/>
 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
 */
Consumer.listByReferenceContactIDOrGovernmentID = function(params, callback) {
	try {
		MasterCardAPI.execute({
			operationConfig: _getOperationConfig("746fc4b6-6a01-4940-8cef-9e7c69cc6e34"),
			operationMetaData: _getOperationMetaData(),
			params: params
		}, callback);
	}
	catch (e) {
		callback(e, null);
	}

};
/**
 * Function to update a Consumer object.
 *
 * @method update
 * @param {Object} params - A map of parameters on which to update the Consumer object.
 * @param {Function} callback - A function to handle success/error responses from the API.<br/>
 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
 */
Consumer.update = function(params, callback) {
	try {
		MasterCardAPI.execute({
			operationConfig: _getOperationConfig("33ad5faf-4a39-470e-8ce2-842d33920d7f"),
			operationMetaData: _getOperationMetaData(),
			params: params
		}, callback);
	}
	catch (e) {
		callback(e, null);
	}

};


module.exports = Consumer;